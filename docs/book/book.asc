PGL: APSimon, Simon para Android sobre Processing
=================================================
:Author:    Javier Morales and David Díaz
:Email:     javimm.morales@gmail & diazglezdavid@gmail.com
:Date:      24/11/2012

== Acerca de este documento

Este dossier recoge las ideas iniciales para el proyecto de «Desarrollo de
Juegos en 2D» de la asignatura de «Programación Multimedia y Dispositivos
Móviles»

== El juego

Para la realización del proyecto hemos decidido implementar, en Processing, el
conocido y popular juego de los 80 «Simon says», creado por Ralph Baer en 1978.

Básicamente, el juego consiste en repetir una secuencia, con ayuda visual y
acústica, propuesta inicialmente por la máquina, incrementándose el nivel de
dificultad con cada acierto. Al fallar la secuencia el juego se da por
terminado.

Más información sobre mismo en:



== Propuesta inicial

Inicialmente, de acuerdo al objetivo planteado y el tiempo disponible, lo que
se pretende es hacer una versión básica del juego en la que la CPU del
dispotivo proponga la secuencia y el usuario, interactuando con la pantalla
táctil, la reproduzca.

Una vez teminada esta parte, podríamos dar paso a:

  * Implementar una pantalla inicial
  * Añadir «mensajes» informativos en caso de éxito o fracaso
  * Añadir niveles de dificultad con un tiempo
  * Posibilidad de multijugador, «challenge», duelos.


== Recursos

El juego se realizará con el lenguaje de programación Processing, con la
intención de utilizar el número máximo posible de funciones del mismo.

No obstante, para trabajar con el audio y algunos otros elementos utilizaremos
la librería APWidgets [http://code.google.com/p/apwidgets/]


== Inspiración

En un principio nos basamos en el código no terminado que se puede encontrar en
Open Processing [http://www.openprocessing.org/sketch/20312], con la intención
de terminarlo con un enfoque algo más orientado a objetos (POO), como se puede
ver en http://www.learningprocessing.com 

== Clases iniciales

En un primer brainstorming pensamos que las clases a implementar podrían ser:

  * Game, que representaría al juego en sí
  * Board, para la construcción del tablero ColoredButton, para instanciar cada
  uno de los «cuadrantes» que se encargarán de autoiluminarse y emitir sonido
  cuando son presionados
  * CPU, que sería el encargado de generar la secuencia aleatoria que el usuario debe repetir
  * Player, que se corresponde con el jugador

== Código del programa «base» (openprocessing.org)


[source, java]
----
----

