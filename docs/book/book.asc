PGL: APSimon, Simon says para Android sobre Processing
======================================================
:Author:    Javier Morales y David Díaz
:Date:      24/11/2012

== Acerca de este documento

La intención de este documento es servir de «dossier» en el que recoger las
ideas iniciales, borrador y objetivo  para el proyecto de «Desarrollo de Juegos
en 2D» de la asignatura de «Programación Multimedia y Dispositivos Móviles».

== El proyecto

=== La idea

Se intentará implementar el conocido y popular juego de los 80
http://en.wikipedia.org/wiki/Simon_(game)[«Simon says»], creado por Ralph Baer
en 1978, para la plataforma Android haciendo uso del lenguaje de programación
http://processing.org[«Processing»], distribuido bajo licencia GNU/GPL.

=== Objetivo

Disponer, al menos, de una versión básica del juego consistente en repetir la
secuencia aleatoria de N elementos de 4 posibles, generada por el programa y
representada visual y acústicamente. 

Con cada acierto el nivel de dificultad, entendido como la longitud de la
secuencia, se irá incrementando dando el juego por finalizado al primer fallo.

=== Alcance

Dado que se trata de un proyecto con fines didácticos, la utilidad del mismo no
pretende ir más allá de su uso en clase para ganar experiencia y bagaje en el
uso del lenguaje utilizado, resolución de problemas durante el desarrollo e
interacción, desde el punto de vista del desarrollo, con el terminal.

No obstante, se pone al alcance de toda persona que quiera hacer uso del mismo,
cualesquiera sean sus fines, desde el mismo instante en el que se decide hacer
uso de http://github.com[GitHub] como «repositorio origen»
[https://github.com/JAvilp/apsimon], permitiendo así el acceso al proyecto y su
evolución durante el desarrollo del mismo.

== Descripción general

=== Perspectiva del proyecto

El usuario interactuará con el terminal haciendo uso de la pantalla táctil, a
fin de reproducir la secuencia sugerida.

=== Funciones de la aplicación

La aplicación ha de generar una secuencia aleatoria de N elementos en base a 4
posibles que posteriormente representará visual y acústicamente.

Además, mostrará al usuario, haciendo el mayor uso posible de las funciones
provistas en la API de Processing:

  * Información del nivel actual (de 1 en adelante).
  * Información de la puntuación actual (de 1 en adelante, siendo un
  «acumulador» de los aciertos, contados éstos en base a la longitud de la
  secuencia).
  * Un «tablero», compuesto de los 4 elementos posibles de la secuencia, con el
  que interactuar a fin de conseguir el objetivo.
  * Texto informativo, de acierto o fracaso, según corresponda.

=== Presentación de la aplicación

La presentación se hará mediante una interfaz limpia y sencilla que ha de
adaptarse, en la medida de lo posible, al tamaño del dispositivo en el que se
esté ejecutando, dando mayor relevancia a los elementos con los que ha de
interactuar el usuario. 

Para ello se ha decidido que el «lienzo» sobre el que se apoya Processing
coincida con el tamaño del disponible, subdividiéndolo mediante «una rejilla»
de 8 filas y 6 columnas. Esto debería permitir un mejor control sobre el
posicionamiento de los elementos así como un «redimendionado» dinámico. 

.Boceto del Layout subdivido en 8 filas y 6 columnas
image::images/apsimon_layout_divide_into_8rows_and_6cols.png["Boceto del layout subdivido en rejilla de 8 filas y 6 columnas"]

.Disposición de los elementos en el layout vertical
image::images/apsimon_elements_in_vertical_layout.png["Disposición de los elementos en el layout vertical"]

.Disposición de los elementos en el layout horizontal 
image::images/apsimon_elements_in_horizontal_layout.png["Disposición de los elementos en el layout horizontal"]

=== Características del usuario

Inicialmente, dado el referido carácter «práctico»/didáctico del proyecto,
el perfil del «usuario final» coincide con el perfil de los desarrolladores:
alumnos en prácticas. Por lo tanto, se les presupone usuarios avanzados, sin
dificultad para desenvolverse con su terminal móvil.

=== Recursos para el desarrollo

Además del uso del ya mencionado lenguaje de programación, Processing, serán
utilizados:

  * La librería http://code.google.com/p/apwidgets/[APWidgets], para el trabajo
  con el audio y algunos otros elementos.
  * La clase
  http://docs.oracle.com/javase/6/docs/api/java/util/Random.html[Random] para
  la generación aleatoria de la secuencia.
  * http://git-scm.com/[Git] para el trabajo en grupo footnote:[En muchos casos
  se está y se estará trabajando en un solo equipo, por lo que la información
  del «commiter» no está vinculada al trabajo/peso real de cada miembro del
  equipo], control de versiones y «sincronización» con el repositorio alojado
  en GitHub.

=== Otros recursos

  * http://soundcloud.com[SoundCloud] para la búsqueda y elección de las pistas
  de audio que sean necesarias.
  * http://www.methods.co.nz/asciidoc/[Asciidoc] para la generación de este
  documento.
  * https://moqups.com/ para la creación de mockups
  * http://www.openprocessing.org[OpenProcessing], como «fuente de
  conocimiento» en la que «ojear» algo de código.
  [http://www.openprocessing.org/sketch/20312]
  * http://www.learningprocessing.com para visualizar ejemplos con enfoques
  orientados a objeto (POO).

== Estado actual

=== Presentación y mockups

A pesar de que aún no se tiene el layout completamente implementado, los
siguientes mockups dan idea visual de como quedaría la aplicación
definitivamente en el terminal.

.Pantalla con todos los elementos/colores «desactivados» (no presionados o no sugeridos por la máquina)
image::images/apsimon_mockup_all_buttons_deactivated.png["Todos los botones «desactivados"]

.Pantalla con un elemento/color/botón activado (el rojo)
image::images/apsimon_mockup_one_button_activated.png["Un botón activado"]

.Pantalla de «Siguiente nivel»
image::images/apsimon_mockup_next_level.png["Siguiente nivel"]

.Pantalla de «Game Over!»
image::images/apsimon_mockup_game_over.png["Game Over"]

=== Clases y objetos

En un primer brainstorming pensamos que las clases a implementar podrían ser:

  * Game, que representaría al juego en sí.
  * Board, para la construcción del tablero.
  * ColouredButton, para instanciar cada
  uno de los 4 «cuadrantes» que se encargarán de autoiluminarse y emitir sonido
  cuando son presionados.
  * CPU, que sería el encargado de generar la secuencia aleatoria que el
  usuario debe repetir.
  * Player, que se corresponde con el jugador.

Las primeras (y sucesivas) implementaciones de esto se pueden ver directamente
en la «página del proyecto» en GitHub, https://github.com/JAvilp/apsimon

== Propuestas de futuro

Siempre que el tiempo lo permitiese, una vez teminada esta parte, podríamos dar paso a:

  * Dar soporte al layout horizontal.
  * Implementar una pantalla inicial.
  * Añadir niveles de dificultad (por ejemplo, con un límite de tiempo).
  * Posibilidad de multijugador («challenge», duelos).
  * Implementar una presentación 3D.
  * ...
